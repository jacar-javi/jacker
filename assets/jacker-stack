#!/usr/bin/env bash

#================================================================
# HEADER
#================================================================
#% DESCRIPTION
#%    Jacker Stack Manager - Browse, install, and manage Docker stacks
#%
#% USAGE
#%    jacker-stack [COMMAND] [OPTIONS]
#%
#% COMMANDS
#%    list              List all available stacks
#%    search <query>    Search for stacks
#%    info <stack>      Show detailed information about a stack
#%    install <stack>   Install a stack
#%    uninstall <stack> Uninstall a stack
#%    update <stack>    Update an installed stack
#%    installed         List installed stacks
#%    repos             List configured repositories
#%    repo-add <url>    Add a stack repository
#%    repo-remove <name> Remove a stack repository
#%
#% SYSTEMD COMMANDS
#%    systemd-create <stack>  Create systemd service for a stack
#%    systemd-remove <stack>  Remove systemd service
#%    systemd-enable <stack>  Enable systemd service (auto-start on boot)
#%    systemd-disable <stack> Disable systemd service
#%    systemd-start <stack>   Start systemd service
#%    systemd-stop <stack>    Stop systemd service
#%    systemd-restart <stack> Restart systemd service
#%    systemd-status <stack>  Show systemd service status
#%    systemd-logs <stack> [lines] View systemd service logs
#%    systemd-list            List all Jacker systemd services
#%
#% OPTIONS
#%    -h, --help        Display this help message
#%    -v, --verbose     Enable verbose output
#%
#================================================================

set -euo pipefail

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
NC='\033[0m' # No Color

# Script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"

# Directories
STACKS_DIR="$PROJECT_ROOT/jacker-stacks"
INSTALLED_DIR="$PROJECT_ROOT/stacks"
CONFIG_DIR="$PROJECT_ROOT/.jacker"
REPOS_FILE="$CONFIG_DIR/repositories.json"

# Ensure directories exist
mkdir -p "$INSTALLED_DIR" "$CONFIG_DIR"

# Verbose mode
VERBOSE=false

#================================================================
# HELPER FUNCTIONS
#================================================================

print_header() {
    echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo -e "${BLUE}  🎯 Jacker Stack Manager${NC}"
    echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo ""
}

print_success() {
    echo -e "${GREEN}✓${NC} $1"
}

print_error() {
    echo -e "${RED}✗${NC} $1" >&2
}

print_warning() {
    echo -e "${YELLOW}⚠${NC} $1"
}

print_info() {
    echo -e "${BLUE}ℹ${NC} $1"
}

print_verbose() {
    if [[ "$VERBOSE" == "true" ]]; then
        echo -e "${CYAN}[DEBUG]${NC} $1"
    fi
}

show_help() {
    sed -n '/^#%/s/^#% \?//p' "$0"
}

#================================================================
# REPOSITORY FUNCTIONS
#================================================================

init_default_repos() {
    if [[ ! -f "$REPOS_FILE" ]]; then
        cat > "$REPOS_FILE" << 'EOF'
{
  "repositories": [
    {
      "name": "jacker-stacks",
      "type": "local",
      "path": "./jacker-stacks",
      "enabled": true
    },
    {
      "name": "awesome-compose",
      "type": "git",
      "url": "https://github.com/docker/awesome-compose",
      "enabled": false
    },
    {
      "name": "compose-examples",
      "type": "git",
      "url": "https://github.com/Haxxnet/Compose-Examples",
      "enabled": false
    }
  ]
}
EOF
        print_verbose "Initialized default repositories"
    fi
}

list_repos() {
    init_default_repos

    print_header
    echo -e "${CYAN}Configured Stack Repositories:${NC}"
    echo ""

    # Parse JSON and display repos
    local repos=$(cat "$REPOS_FILE" | grep -o '"name": *"[^"]*"' | cut -d'"' -f4)
    local count=1

    while IFS= read -r repo; do
        if [[ -n "$repo" ]]; then
            local enabled=$(cat "$REPOS_FILE" | jq -r ".repositories[] | select(.name==\"$repo\") | .enabled")
            local type=$(cat "$REPOS_FILE" | jq -r ".repositories[] | select(.name==\"$repo\") | .type")
            local status="${GREEN}✓ enabled${NC}"
            [[ "$enabled" == "false" ]] && status="${YELLOW}○ disabled${NC}"

            echo -e "  ${count}. ${CYAN}$repo${NC} ($type) - $status"
            ((count++))
        fi
    done <<< "$repos"

    echo ""
}

add_repo() {
    local url=$1
    local name=$(basename "$url" .git)

    init_default_repos

    # Check if already exists
    if cat "$REPOS_FILE" | jq -e ".repositories[] | select(.name==\"$name\")" >/dev/null 2>&1; then
        print_error "Repository '$name' already exists"
        return 1
    fi

    # Add to repos file
    local tmp=$(mktemp)
    cat "$REPOS_FILE" | jq ".repositories += [{\"name\": \"$name\", \"type\": \"git\", \"url\": \"$url\", \"enabled\": true}]" > "$tmp"
    mv "$tmp" "$REPOS_FILE"

    print_success "Added repository: $name"
}

remove_repo() {
    local name=$1

    # Remove from repos file
    local tmp=$(mktemp)
    cat "$REPOS_FILE" | jq ".repositories |= map(select(.name != \"$name\"))" > "$tmp"
    mv "$tmp" "$REPOS_FILE"

    print_success "Removed repository: $name"
}

#================================================================
# STACK DISCOVERY FUNCTIONS
#================================================================

find_stacks() {
    local search_query=${1:-}
    local stacks=()

    # Search in jacker-stacks (local)
    if [[ -d "$STACKS_DIR" ]]; then
        while IFS= read -r -d '' compose_file; do
            local stack_dir=$(dirname "$compose_file")
            local stack_name=$(basename "$stack_dir")
            local category=$(basename "$(dirname "$stack_dir")")

            # Skip if searching and doesn't match
            if [[ -n "$search_query" ]] && [[ ! "$stack_name" =~ $search_query ]]; then
                continue
            fi

            # Check for metadata
            local description=""
            if [[ -f "$stack_dir/README.md" ]]; then
                description=$(head -n 5 "$stack_dir/README.md" | grep -v "^#" | head -n 1 | xargs)
            fi

            stacks+=("$category/$stack_name|$description|local")
        done < <(find "$STACKS_DIR" -mindepth 2 -maxdepth 3 -name "docker-compose.yml" -print0)
    fi

    printf '%s\n' "${stacks[@]}"
}

#================================================================
# STACK LISTING FUNCTIONS
#================================================================

list_stacks() {
    print_header
    echo -e "${CYAN}Available Stacks:${NC}"
    echo ""

    local current_category=""
    local count=0

    while IFS='|' read -r stack_path description source; do
        if [[ -z "$stack_path" ]]; then
            continue
        fi

        local category=$(echo "$stack_path" | cut -d'/' -f1)
        local stack_name=$(echo "$stack_path" | cut -d'/' -f2)

        # Print category header
        if [[ "$category" != "$current_category" ]]; then
            [[ -n "$current_category" ]] && echo ""
            echo -e "${MAGENTA}📁 $category${NC}"
            current_category="$category"
        fi

        # Check if installed
        local installed_marker=""
        if [[ -d "$INSTALLED_DIR/$stack_name" ]]; then
            installed_marker=" ${GREEN}[installed]${NC}"
        fi

        echo -e "  ${CYAN}•${NC} $stack_name$installed_marker"
        [[ -n "$description" ]] && echo -e "    ${NC}$description${NC}"

        ((count++))
    done < <(find_stacks | sort)

    echo ""
    echo -e "${BLUE}Total: $count stacks${NC}"
    echo ""
}

search_stacks() {
    local query=$1

    print_header
    echo -e "${CYAN}Search results for: ${YELLOW}$query${NC}"
    echo ""

    local count=0

    while IFS='|' read -r stack_path description source; do
        if [[ -z "$stack_path" ]]; then
            continue
        fi

        local stack_name=$(basename "$stack_path")

        # Check if installed
        local installed_marker=""
        if [[ -d "$INSTALLED_DIR/$stack_name" ]]; then
            installed_marker=" ${GREEN}[installed]${NC}"
        fi

        echo -e "  ${CYAN}•${NC} $stack_name ($stack_path)$installed_marker"
        [[ -n "$description" ]] && echo -e "    $description"
        echo ""

        ((count++))
    done < <(find_stacks "$query")

    echo -e "${BLUE}Found: $count stacks${NC}"
    echo ""
}

#================================================================
# STACK INFO FUNCTIONS
#================================================================

show_stack_info() {
    local stack_name=$1

    # Find stack
    local stack_path=""
    while IFS='|' read -r path desc source; do
        if [[ "$(basename "$path")" == "$stack_name" ]]; then
            stack_path="$STACKS_DIR/$path"
            break
        fi
    done < <(find_stacks)

    if [[ -z "$stack_path" ]]; then
        print_error "Stack '$stack_name' not found"
        return 1
    fi

    print_header
    echo -e "${CYAN}Stack Information: ${YELLOW}$stack_name${NC}"
    echo ""

    # Show README if exists
    if [[ -f "$stack_path/README.md" ]]; then
        echo -e "${BLUE}Description:${NC}"
        head -n 20 "$stack_path/README.md"
        echo ""
    fi

    # Show services
    if [[ -f "$stack_path/docker-compose.yml" ]]; then
        echo -e "${BLUE}Services:${NC}"
        grep "^  [a-zA-Z]" "$stack_path/docker-compose.yml" | sed 's/:$//' | sed 's/^/  • /'
        echo ""
    fi

    # Show if installed
    if [[ -d "$INSTALLED_DIR/$stack_name" ]]; then
        echo -e "${GREEN}✓ Installed${NC} at: $INSTALLED_DIR/$stack_name"
    else
        echo -e "${YELLOW}○ Not installed${NC}"
    fi

    echo ""
}

#================================================================
# STACK INSTALLATION FUNCTIONS
#================================================================

install_stack() {
    local stack_name=$1
    local custom_name=${2:-$stack_name}

    # Find stack
    local stack_source=""
    while IFS='|' read -r path desc source; do
        if [[ "$(basename "$path")" == "$stack_name" ]]; then
            stack_source="$STACKS_DIR/$path"
            break
        fi
    done < <(find_stacks)

    if [[ -z "$stack_source" ]]; then
        print_error "Stack '$stack_name' not found"
        return 1
    fi

    local install_path="$INSTALLED_DIR/$custom_name"

    # Check if already installed
    if [[ -d "$install_path" ]]; then
        print_error "Stack '$custom_name' is already installed"
        return 1
    fi

    print_info "Installing stack: $stack_name → $custom_name"

    # Copy stack files
    cp -r "$stack_source" "$install_path"

    # Create .env if doesn't exist
    if [[ ! -f "$install_path/.env" ]] && [[ -f "$install_path/.env.sample" ]]; then
        cp "$install_path/.env.sample" "$install_path/.env"
        print_warning "Created .env from .env.sample - please configure it"
    fi

    # Update docker-compose.yml to point to main network
    if [[ -f "$install_path/docker-compose.yml" ]]; then
        print_verbose "Configuring network integration..."
    fi

    print_success "Stack installed: $custom_name"
    print_info "Location: $install_path"
    print_info "Next steps:"
    echo "  1. cd $install_path"
    echo "  2. Edit .env file with your settings"
    echo "  3. docker compose up -d"
    echo ""
}

uninstall_stack() {
    local stack_name=$1
    local install_path="$INSTALLED_DIR/$stack_name"

    if [[ ! -d "$install_path" ]]; then
        print_error "Stack '$stack_name' is not installed"
        return 1
    fi

    # Confirm
    echo -e "${YELLOW}⚠ This will remove the stack and all its data${NC}"
    read -p "Are you sure you want to uninstall '$stack_name'? (y/N): " -n 1 -r
    echo ""
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        print_warning "Uninstall cancelled"
        return 0
    fi

    # Stop containers first
    if [[ -f "$install_path/docker-compose.yml" ]]; then
        print_info "Stopping containers..."
        (cd "$install_path" && docker compose down 2>/dev/null) || true
    fi

    # Remove directory
    rm -rf "$install_path"

    print_success "Stack uninstalled: $stack_name"
}

list_installed() {
    print_header
    echo -e "${CYAN}Installed Stacks:${NC}"
    echo ""

    if [[ ! -d "$INSTALLED_DIR" ]] || [[ -z "$(ls -A "$INSTALLED_DIR" 2>/dev/null)" ]]; then
        echo -e "  ${YELLOW}No stacks installed${NC}"
        echo ""
        return 0
    fi

    local count=0
    for stack_dir in "$INSTALLED_DIR"/*; do
        if [[ -d "$stack_dir" ]]; then
            local stack_name=$(basename "$stack_dir")

            # Check if running
            local status="${YELLOW}○ stopped${NC}"
            if [[ -f "$stack_dir/docker-compose.yml" ]]; then
                if (cd "$stack_dir" && docker compose ps --format json 2>/dev/null | jq -e '. | length > 0' >/dev/null 2>&1); then
                    status="${GREEN}● running${NC}"
                fi
            fi

            echo -e "  ${CYAN}•${NC} $stack_name - $status"
            echo -e "    📍 $stack_dir"

            ((count++))
        fi
    done

    echo ""
    echo -e "${BLUE}Total: $count installed${NC}"
    echo ""
}

#================================================================
# SYSTEMD SERVICE FUNCTIONS
#================================================================

systemd_create() {
    local stack_name=$1
    local install_path="$INSTALLED_DIR/$stack_name"

    if [[ ! -d "$install_path" ]]; then
        print_error "Stack '$stack_name' is not installed"
        return 1
    fi

    print_info "Creating systemd service for: $stack_name"

    # Service file name
    local service_name="jacker-${stack_name}.service"
    local service_file="/etc/systemd/system/$service_name"

    # Check if service already exists
    if [[ -f "$service_file" ]]; then
        print_warning "Service already exists: $service_name"
        read -p "Do you want to overwrite it? (y/N): " -n 1 -r
        echo ""
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            print_warning "Cancelled"
            return 0
        fi
    fi

    # Get stack metadata
    local stack_display_name="$stack_name"
    local stack_description="Jacker Stack"

    if [[ -f "$install_path/stack.yml" ]]; then
        stack_display_name=$(grep "^display_name:" "$install_path/stack.yml" | cut -d'"' -f2 || echo "$stack_name")
        stack_description=$(grep "^description:" "$install_path/stack.yml" | cut -d'"' -f2 || echo "Jacker Stack")
    fi

    # Create systemd service file
    sudo tee "$service_file" > /dev/null << EOF
[Unit]
Description=$stack_display_name - Jacker Stack
Documentation=https://jacker.jacar.es
After=docker.service network-online.target
Requires=docker.service
Wants=network-online.target

[Service]
Type=oneshot
RemainAfterExit=yes

# Working directory
WorkingDirectory=$install_path

# Environment
Environment="COMPOSE_PROJECT_NAME=$stack_name"
$(if [[ -f "$install_path/.env" ]]; then echo "EnvironmentFile=$install_path/.env"; fi)

# Pre-start hooks
ExecStartPre=-/usr/bin/bash -c 'if [ -x $install_path/scripts/pre-start.sh ]; then $install_path/scripts/pre-start.sh; fi'
ExecStartPre=/usr/bin/docker compose -f $install_path/docker-compose.yml config --quiet

# Start the stack
ExecStart=/usr/bin/docker compose -f $install_path/docker-compose.yml up -d --remove-orphans

# Post-start hooks
ExecStartPost=-/usr/bin/bash -c 'if [ -x $install_path/scripts/post-start.sh ]; then $install_path/scripts/post-start.sh; fi'
ExecStartPost=/usr/bin/bash -c 'echo "$stack_display_name started at \$(date)" | systemd-cat -t jacker-$stack_name'

# Pre-stop hooks
ExecStop=-/usr/bin/bash -c 'if [ -x $install_path/scripts/pre-stop.sh ]; then $install_path/scripts/pre-stop.sh; fi'

# Stop the stack
ExecStop=/usr/bin/docker compose -f $install_path/docker-compose.yml down

# Post-stop hooks
ExecStopPost=-/usr/bin/bash -c 'if [ -x $install_path/scripts/post-stop.sh ]; then $install_path/scripts/post-stop.sh; fi'
ExecStopPost=/usr/bin/bash -c 'echo "$stack_display_name stopped at \$(date)" | systemd-cat -t jacker-$stack_name'

# Reload configuration
ExecReload=/usr/bin/docker compose -f $install_path/docker-compose.yml up -d --force-recreate

# Restart policy
Restart=on-failure
RestartSec=10s

# Timeouts
TimeoutStartSec=120s
TimeoutStopSec=60s

# Logging
StandardOutput=journal
StandardError=journal
SyslogIdentifier=jacker-$stack_name

[Install]
WantedBy=multi-user.target
EOF

    # Reload systemd daemon
    sudo systemctl daemon-reload

    print_success "Systemd service created: $service_name"
    print_info "To enable auto-start: systemctl enable $service_name"
    print_info "To start the service: systemctl start $service_name"
    echo ""
}

systemd_remove() {
    local stack_name=$1
    local service_name="jacker-${stack_name}.service"
    local service_file="/etc/systemd/system/$service_name"

    if [[ ! -f "$service_file" ]]; then
        print_error "Service not found: $service_name"
        return 1
    fi

    print_info "Removing systemd service: $service_name"

    # Stop and disable service
    sudo systemctl stop "$service_name" 2>/dev/null || true
    sudo systemctl disable "$service_name" 2>/dev/null || true

    # Remove service file
    sudo rm "$service_file"

    # Reload systemd daemon
    sudo systemctl daemon-reload

    print_success "Systemd service removed: $service_name"
    echo ""
}

systemd_enable() {
    local stack_name=$1
    local service_name="jacker-${stack_name}.service"

    if [[ ! -f "/etc/systemd/system/$service_name" ]]; then
        print_error "Service not found: $service_name"
        print_info "Create it first: jacker-stack systemd-create $stack_name"
        return 1
    fi

    print_info "Enabling systemd service: $service_name"
    sudo systemctl enable "$service_name"
    print_success "Service enabled (will start on boot)"
    echo ""
}

systemd_disable() {
    local stack_name=$1
    local service_name="jacker-${stack_name}.service"

    if [[ ! -f "/etc/systemd/system/$service_name" ]]; then
        print_error "Service not found: $service_name"
        return 1
    fi

    print_info "Disabling systemd service: $service_name"
    sudo systemctl disable "$service_name"
    print_success "Service disabled (will not start on boot)"
    echo ""
}

systemd_start() {
    local stack_name=$1
    local service_name="jacker-${stack_name}.service"

    if [[ ! -f "/etc/systemd/system/$service_name" ]]; then
        print_error "Service not found: $service_name"
        print_info "Create it first: jacker-stack systemd-create $stack_name"
        return 1
    fi

    print_info "Starting systemd service: $service_name"
    sudo systemctl start "$service_name"

    # Show status
    if sudo systemctl is-active --quiet "$service_name"; then
        print_success "Service started successfully"
    else
        print_error "Failed to start service"
        print_info "Check status: systemctl status $service_name"
    fi
    echo ""
}

systemd_stop() {
    local stack_name=$1
    local service_name="jacker-${stack_name}.service"

    if [[ ! -f "/etc/systemd/system/$service_name" ]]; then
        print_error "Service not found: $service_name"
        return 1
    fi

    print_info "Stopping systemd service: $service_name"
    sudo systemctl stop "$service_name"
    print_success "Service stopped"
    echo ""
}

systemd_restart() {
    local stack_name=$1
    local service_name="jacker-${stack_name}.service"

    if [[ ! -f "/etc/systemd/system/$service_name" ]]; then
        print_error "Service not found: $service_name"
        return 1
    fi

    print_info "Restarting systemd service: $service_name"
    sudo systemctl restart "$service_name"

    # Show status
    if sudo systemctl is-active --quiet "$service_name"; then
        print_success "Service restarted successfully"
    else
        print_error "Failed to restart service"
        print_info "Check status: systemctl status $service_name"
    fi
    echo ""
}

systemd_status() {
    local stack_name=$1
    local service_name="jacker-${stack_name}.service"

    if [[ ! -f "/etc/systemd/system/$service_name" ]]; then
        print_error "Service not found: $service_name"
        return 1
    fi

    sudo systemctl status "$service_name" --no-pager
}

systemd_logs() {
    local stack_name=$1
    local service_name="jacker-${stack_name}.service"
    local lines=${2:-100}

    if [[ ! -f "/etc/systemd/system/$service_name" ]]; then
        print_error "Service not found: $service_name"
        return 1
    fi

    print_info "Showing logs for: $service_name"
    echo ""
    sudo journalctl -u "$service_name" -n "$lines" --no-pager
}

systemd_list() {
    print_header
    echo -e "${CYAN}Jacker Systemd Services:${NC}"
    echo ""

    local services=$(systemctl list-unit-files "jacker-*.service" --no-legend 2>/dev/null | awk '{print $1}')

    if [[ -z "$services" ]]; then
        echo -e "  ${YELLOW}No systemd services found${NC}"
        echo ""
        return 0
    fi

    local count=0
    while IFS= read -r service; do
        if [[ -n "$service" ]]; then
            local stack_name=$(echo "$service" | sed 's/jacker-//;s/.service//')
            local enabled=$(systemctl is-enabled "$service" 2>/dev/null || echo "disabled")
            local active=$(systemctl is-active "$service" 2>/dev/null || echo "inactive")

            local status_color=$YELLOW
            [[ "$active" == "active" ]] && status_color=$GREEN
            [[ "$active" == "failed" ]] && status_color=$RED

            local enabled_marker=""
            [[ "$enabled" == "enabled" ]] && enabled_marker="${GREEN}[auto-start]${NC}"

            echo -e "  ${CYAN}•${NC} $stack_name - ${status_color}$active${NC} $enabled_marker"
            ((count++))
        fi
    done <<< "$services"

    echo ""
    echo -e "${BLUE}Total: $count services${NC}"
    echo ""
}

#================================================================
# MAIN
#================================================================

main() {
    local command=${1:-help}
    shift || true

    case $command in
        list|ls)
            list_stacks
            ;;
        search)
            if [[ -z "${1:-}" ]]; then
                print_error "Usage: jacker-stack search <query>"
                exit 1
            fi
            search_stacks "$1"
            ;;
        info)
            if [[ -z "${1:-}" ]]; then
                print_error "Usage: jacker-stack info <stack>"
                exit 1
            fi
            show_stack_info "$1"
            ;;
        install)
            if [[ -z "${1:-}" ]]; then
                print_error "Usage: jacker-stack install <stack> [custom-name]"
                exit 1
            fi
            install_stack "$1" "${2:-$1}"
            ;;
        uninstall|remove)
            if [[ -z "${1:-}" ]]; then
                print_error "Usage: jacker-stack uninstall <stack>"
                exit 1
            fi
            uninstall_stack "$1"
            ;;
        installed)
            list_installed
            ;;
        repos)
            list_repos
            ;;
        repo-add)
            if [[ -z "${1:-}" ]]; then
                print_error "Usage: jacker-stack repo-add <url>"
                exit 1
            fi
            add_repo "$1"
            ;;
        repo-remove)
            if [[ -z "${1:-}" ]]; then
                print_error "Usage: jacker-stack repo-remove <name>"
                exit 1
            fi
            remove_repo "$1"
            ;;
        systemd-create)
            if [[ -z "${1:-}" ]]; then
                print_error "Usage: jacker-stack systemd-create <stack>"
                exit 1
            fi
            systemd_create "$1"
            ;;
        systemd-remove)
            if [[ -z "${1:-}" ]]; then
                print_error "Usage: jacker-stack systemd-remove <stack>"
                exit 1
            fi
            systemd_remove "$1"
            ;;
        systemd-enable)
            if [[ -z "${1:-}" ]]; then
                print_error "Usage: jacker-stack systemd-enable <stack>"
                exit 1
            fi
            systemd_enable "$1"
            ;;
        systemd-disable)
            if [[ -z "${1:-}" ]]; then
                print_error "Usage: jacker-stack systemd-disable <stack>"
                exit 1
            fi
            systemd_disable "$1"
            ;;
        systemd-start)
            if [[ -z "${1:-}" ]]; then
                print_error "Usage: jacker-stack systemd-start <stack>"
                exit 1
            fi
            systemd_start "$1"
            ;;
        systemd-stop)
            if [[ -z "${1:-}" ]]; then
                print_error "Usage: jacker-stack systemd-stop <stack>"
                exit 1
            fi
            systemd_stop "$1"
            ;;
        systemd-restart)
            if [[ -z "${1:-}" ]]; then
                print_error "Usage: jacker-stack systemd-restart <stack>"
                exit 1
            fi
            systemd_restart "$1"
            ;;
        systemd-status)
            if [[ -z "${1:-}" ]]; then
                print_error "Usage: jacker-stack systemd-status <stack>"
                exit 1
            fi
            systemd_status "$1"
            ;;
        systemd-logs)
            if [[ -z "${1:-}" ]]; then
                print_error "Usage: jacker-stack systemd-logs <stack> [lines]"
                exit 1
            fi
            systemd_logs "$1" "${2:-100}"
            ;;
        systemd-list)
            systemd_list
            ;;
        -h|--help|help)
            show_help
            ;;
        -v|--verbose)
            VERBOSE=true
            main "$@"
            ;;
        *)
            print_error "Unknown command: $command"
            echo ""
            show_help
            exit 1
            ;;
    esac
}

main "$@"
