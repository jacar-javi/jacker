global:
  checkNewVersion: true
  sendAnonymousUsage: false

# Certificate Resolvers - Let's Encrypt
# Note: Email can be configured here or via TRAEFIK_CERTIFICATESRESOLVERS_http_ACME_EMAIL env var
certificatesResolvers:
  http:
    acme:
      storage: /acme.json
      tlsChallenge: {}
      # Production Let's Encrypt server (rate limited)
      caServer: https://acme-v02.api.letsencrypt.org/directory
      # Uncomment for staging/testing to avoid rate limits
      # caServer: https://acme-staging-v02.api.letsencrypt.org/directory

# Entry Points Configuration
entryPoints:
  web:
    address: :80
    # Redirect all HTTP to HTTPS
    http:
      redirections:
        entrypoint:
          to: websecure
          scheme: https
          permanent: true
    # Transport configuration for security
    transport:
      lifeCycle:
        requestAcceptGraceTimeout: 0
        graceTimeOut: 10s
      respondingTimeouts:
        readTimeout: 60s
        writeTimeout: 60s
        idleTimeout: 180s

  websecure:
    address: :443
    http:
      tls:
        options: tls-opts@file
        certresolver: http
    http3:
      advertisedPort: 443

    # Transport configuration for security
    transport:
      lifeCycle:
        requestAcceptGraceTimeout: 0
        graceTimeOut: 10s
      respondingTimeouts:
        readTimeout: 60s
        writeTimeout: 60s
        idleTimeout: 180s

  traefik:
    address: :8080

# API and Dashboard Configuration
api:
  dashboard: true
  insecure: true  # Dashboard is protected by OAuth
  debug: false

# Ping endpoint for health checks
ping:
  entryPoint: traefik
  manualRouting: false
  terminatingStatusCode: 503

# Logging Configuration
log:
  level: INFO  # Can be: DEBUG, INFO, WARN, ERROR, FATAL, PANIC
  filePath: /logs/traefik-error.log

# Access Logging Configuration
accessLog:
  filePath: /logs/traefik-access.log
  fields:
    names:
      StartUTC: drop
  bufferingSize: 100
  filters:
    statusCodes:
      - 204-299
      - 400-499
      - 500-599

# Providers Configuration
providers:
  docker:
    endpoint: tcp://socket-proxy:2375
    exposedByDefault: false
    network: traefik_proxy

  file:
    directory: /rules
    watch: true

# Metrics Configuration - Prometheus
metrics:
  prometheus:
    buckets:
      - 0.1
      - 0.3
      - 1.2
      - 5.0
    addEntryPointsLabels: true
    addServicesLabels: true
    addRoutersLabels: true

# Tracing Configuration (OPTIONAL - Enable via environment variable)
# Jaeger tracing for distributed tracing
# Uncomment the section below and set TRAEFIK_TRACING_ENABLED=true to enable
# tracing:
#   jaeger:
#     samplingType: const
#     samplingParam: 1.0
#     localAgentHostPort: jaeger:6831
#     propagation: jaeger
#     traceContextHeaderName: uber-trace-id
#     collector:
#       endpoint: http://jaeger:14268/api/traces
#       user: ""
#       password: ""
#     disableAttemptReconnecting: true

# OTLP (OpenTelemetry) tracing - Modern alternative
# Uncomment to use OTLP instead of Jaeger
# tracing:
#   otlp:
#     http:
#       endpoint: http://otel-collector:4318
#       headers:
#         Authorization: Bearer <token>
#       tls:
#         ca: /path/to/ca.crt
#         cert: /path/to/cert.crt
#         key: /path/to/key.key
#         insecureSkipVerify: false
#     grpc:
#       endpoint: otel-collector:4317
#       insecure: true

