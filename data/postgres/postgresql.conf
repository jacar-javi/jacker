# ============================================================================
# PostgreSQL 17 Performance Tuning Configuration
# ============================================================================
# Optimized for CrowdSec database workload
# Typical server: 4GB RAM, 2-4 CPUs
# Adjust based on your server resources
# ============================================================================

# CONNECTIONS AND AUTHENTICATION
#========================================================================================================================
max_connections = 100                    # Default: 100
superuser_reserved_connections = 3

# MEMORY SETTINGS
#========================================================================================================================
# Rule of thumb: shared_buffers = 25% of RAM (for dedicated DB server)
# For 4GB server = 1GB, for 8GB server = 2GB
shared_buffers = 1GB                     # Default: 128MB

# Effective cache: OS cache + shared_buffers (estimate 75% of total RAM)
effective_cache_size = 3GB               # Default: 4GB

# Work memory: RAM for sorts, hash tables per operation
# Formula: (Total RAM * 0.25) / max_connections
# For 4GB RAM: (4GB * 0.25) / 100 = 10MB
work_mem = 10MB                          # Default: 4MB

# Maintenance work memory: for VACUUM, CREATE INDEX
# Typically 5-10% of RAM
maintenance_work_mem = 256MB             # Default: 64MB

# WRITE AHEAD LOG (WAL)
#========================================================================================================================
wal_buffers = 16MB                       # Default: -1 (auto: 3% of shared_buffers)
min_wal_size = 1GB                       # Default: 80MB
max_wal_size = 4GB                       # Default: 1GB

# Checkpoint settings for performance
checkpoint_completion_target = 0.9       # Default: 0.9
checkpoint_timeout = 15min               # Default: 5min

# WAL archiving (disable if not using replication/backup)
wal_level = replica                      # Default: replica
archive_mode = off                       # Enable for backups

# QUERY PLANNER
#========================================================================================================================
# For SSD storage
random_page_cost = 1.1                   # Default: 4.0 (HDD), use 1.1 for SSD
effective_io_concurrency = 200           # Default: 1, use 200 for SSD

# Parallel query execution
max_worker_processes = 4                 # Default: 8
max_parallel_workers_per_gather = 2      # Default: 2
max_parallel_workers = 4                 # Default: 8
max_parallel_maintenance_workers = 2     # Default: 2

# LOGGING
#========================================================================================================================
# Log slow queries
log_min_duration_statement = 1000        # Log queries slower than 1000ms (1s)

# Log checkpoints for monitoring
log_checkpoints = on
log_connections = off
log_disconnections = off
log_lock_waits = on                      # Log lock waits
log_temp_files = 0                       # Log temp files

# Log format
log_line_prefix = '%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h '
log_timezone = 'UTC'

# AUTOVACUUM (Critical for performance)
#========================================================================================================================
autovacuum = on                          # Default: on
autovacuum_max_workers = 3               # Default: 3
autovacuum_naptime = 1min                # Default: 1min

# Aggressive autovacuum for high-write workloads (CrowdSec)
autovacuum_vacuum_scale_factor = 0.1     # Default: 0.2 (vacuum at 10% dead tuples)
autovacuum_analyze_scale_factor = 0.05   # Default: 0.1 (analyze at 5% changes)

# Cost-based autovacuum delay (don't overwhelm I/O)
autovacuum_vacuum_cost_delay = 10ms      # Default: 2ms
autovacuum_vacuum_cost_limit = 200       # Default: 200

# STATEMENT STATISTICS
#========================================================================================================================
# Track query performance (requires pg_stat_statements extension)
shared_preload_libraries = 'pg_stat_statements'
pg_stat_statements.max = 10000
pg_stat_statements.track = all

# CONNECTION POOLING
#========================================================================================================================
# If using pgBouncer, adjust these
tcp_keepalives_idle = 60                 # Default: 0
tcp_keepalives_interval = 10             # Default: 0
tcp_keepalives_count = 3                 # Default: 0

# CLIENT CONNECTION DEFAULTS
#========================================================================================================================
datestyle = 'iso, mdy'
timezone = 'UTC'
lc_messages = 'en_US.utf8'
lc_monetary = 'en_US.utf8'
lc_numeric = 'en_US.utf8'
lc_time = 'en_US.utf8'
default_text_search_config = 'pg_catalog.english'

# LOCKS
#========================================================================================================================
max_locks_per_transaction = 64           # Default: 64
max_pred_locks_per_transaction = 64      # Default: 64

# RESOURCE LIMITS
#========================================================================================================================
# Temporary file size limit (per query)
temp_file_limit = 1GB                    # Default: -1 (unlimited)

# ============================================================================
# NOTES:
# ============================================================================
# 1. After changing this file, restart PostgreSQL
# 2. Monitor performance with: pg_stat_statements, pg_stat_user_tables
# 3. For 2GB RAM server, reduce shared_buffers to 512MB, effective_cache_size to 1.5GB
# 4. For 8GB+ RAM server, increase shared_buffers to 2GB, effective_cache_size to 6GB
# 5. Run ANALYZE after bulk imports
# 6. Regular VACUUM ANALYZE recommended for CrowdSec high-write workload
# ============================================================================
