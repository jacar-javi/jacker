# ============================================
# Jacker Environment Configuration Sample
# ============================================
# This is a minimal example configuration
# Copy to .env and adjust for your environment
# See .env.defaults for all available options

# ============================================
# REQUIRED: Basic Configuration
# ============================================

# System user (use 'id' command to get these)
PUID=1000
PGID=1000

# Timezone
TZ=America/New_York

# Paths (adjust to your system)
USERDIR=/home/username
DOCKERDIR=/home/username/jacker
DATADIR=/home/username/jacker/data
CONFIGDIR=/home/username/jacker/config
SECRETSDIR=/home/username/jacker/secrets

# ============================================
# REQUIRED: Network Configuration
# ============================================

# Your server hostname
HOSTNAME=myserver

# Your domain name
DOMAINNAME=example.com

# Full public FQDN
PUBLIC_FQDN=myserver.example.com

# ============================================
# REQUIRED: SSL Configuration
# ============================================

# Email for Let's Encrypt certificates
LETSENCRYPT_EMAIL=admin@example.com

# ============================================
# REQUIRED: Authentication (Choose One)
# ============================================

# Option 1: Google OAuth (Recommended)
OAUTH_PROVIDER=google
OAUTH_CLIENT_ID=your-google-client-id.apps.googleusercontent.com
OAUTH_CLIENT_SECRET=your-google-client-secret
OAUTH_WHITELIST=user1@gmail.com,user2@gmail.com

# Option 2: No Authentication (Development Only!)
# DISABLE_AUTH=true

# ============================================
# REQUIRED: Database Passwords
# ============================================
# Generate secure passwords with: openssl rand -base64 32
# NOTE: These values are used to initialize Docker secrets
# After running ./scripts/init-secrets.sh, credentials are stored in secrets/ directory

POSTGRES_PASSWORD=changeme_use_strong_password_here
REDIS_PASSWORD=changeme_use_strong_password_here

# MIGRATION NOTE: After initialization, these passwords are stored as Docker secrets:
#   - secrets/postgres_password (used by PostgreSQL, CrowdSec, Authentik)
#   - secrets/redis_password (used by Redis, OAuth2-Proxy, Grafana)

# ============================================
# REQUIRED: Security Keys
# ============================================
# Generate with: openssl rand -hex 32
# NOTE: These values are used to initialize Docker secrets

CROWDSEC_TRAEFIK_BOUNCER_API_KEY=changeme_generate_random_key
CROWDSEC_API_LOCAL_PASSWORD=changeme_generate_random_password

# OAuth secrets (generate with: openssl rand -base64 32)
OAUTH_SECRET=changeme_generate_random_secret
OAUTH_COOKIE_SECRET=changeme_generate_random_secret

# MIGRATION NOTE: After initialization, these are stored as Docker secrets:
#   - secrets/crowdsec_bouncer_key (Traefik bouncer authentication)
#   - secrets/crowdsec_lapi_key (CrowdSec Local API authentication)
#   - secrets/oauth_client_secret (OAuth provider client secret - SET MANUALLY)
#   - secrets/oauth_cookie_secret (OAuth cookie encryption)
#   - secrets/traefik_forward_oauth (Traefik forward auth token)

# ============================================
# Optional: Email Alerts
# ============================================

# SMTP configuration for alerts
# SMTP_HOST=smtp.gmail.com
# SMTP_PORT=587
# SMTP_USERNAME=your-email@gmail.com
# SMTP_PASSWORD=your-app-password
# ALERT_EMAIL_TO=admin@example.com

# ============================================
# Optional: Docker Image Update Notifier (Diun)
# ============================================

# Registry Authentication (to avoid rate limits)
# DOCKERHUB_USERNAME=
# DOCKERHUB_PASSWORD=

# GitHub Container Registry (optional)
# GHCR_USERNAME=
# GHCR_TOKEN=

# Private Registry (optional)
# REGISTRY_URL=
# REGISTRY_USERNAME=
# REGISTRY_PASSWORD=

# Gotify Push Notifications (optional)
# GOTIFY_URL=
# GOTIFY_TOKEN=

# Note: SMTP settings (SMTP_HOST, SMTP_PORT, SMTP_USERNAME, SMTP_PASSWORD)
#       and ALERT_EMAIL_TO are already defined in the Email Alerts section above

# ============================================
# Optional: Advanced Features
# ============================================

# Enable Authentik (self-hosted auth)
# ENABLE_AUTHENTIK=true
# AUTHENTIK_SECRET_KEY=$(openssl rand -base64 60)
# AUTHENTIK_POSTGRES_PASSWORD=$(openssl rand -base64 32)

# Enable additional monitoring
# ENABLE_JAEGER=true
# ENABLE_REDIS_COMMANDER=true

# ============================================
# Optional: Trivy Container Vulnerability Scanner
# ============================================

# Trivy server port (default: 8081)
# TRIVY_PORT=8081

# Severity levels to scan (comma-separated)
# TRIVY_SEVERITY=CRITICAL,HIGH,MEDIUM

# Alert thresholds
# TRIVY_CRITICAL_THRESHOLD=1    # Alert on any CRITICAL vulnerability
# TRIVY_HIGH_THRESHOLD=5        # Alert if 5+ HIGH vulnerabilities
# TRIVY_SECRETS_THRESHOLD=1     # Alert on any exposed secret

# Scan timeout
# TRIVY_TIMEOUT=10m

# Report retention (days)
# TRIVY_RETENTION_DAYS=30

# Debug mode
# TRIVY_DEBUG=false

# Container exclusion pattern (regex)
# TRIVY_EXCLUDE_PATTERN=^(trivy|socket-proxy)$

# Scanning schedule (managed externally via cron)
# Daily full scan at 2 AM: 0 2 * * *

# ============================================
# Secrets Management
# ============================================
# Jacker uses Docker secrets for enhanced security. Sensitive credentials
# are stored in the secrets/ directory as individual files, not in .env.
#
# Setup Process:
#   1. Copy this file to .env and configure your values
#   2. Run: ./scripts/init-secrets.sh
#      - Reads passwords from .env
#      - Creates individual files in secrets/ directory
#      - Sets proper permissions (mode 600)
#   3. Optionally remove plaintext passwords from .env after initialization
#   4. Start services: docker compose up -d
#
# Secret Storage:
#   - secrets/oauth_client_secret    - OAuth provider client secret
#   - secrets/oauth_cookie_secret    - OAuth cookie encryption key
#   - secrets/postgres_password      - PostgreSQL master password
#   - secrets/redis_password         - Redis authentication password
#   - secrets/crowdsec_bouncer_key   - CrowdSec Traefik bouncer key
#   - secrets/grafana_admin_password - Grafana admin password
#   - Additional secrets as needed
#
# Security Notes:
#   - Secrets directory is excluded from git (.gitignore)
#   - File permissions: 600 (owner read/write only)
#   - Directory permissions: 700 (owner access only)
#   - Rotate secrets regularly: ./scripts/init-secrets.sh --rotate
#
# Documentation: docs/SECRETS_MANAGEMENT.md

# ============================================
# Notes:
# ============================================
# 1. Replace all 'changeme_' values with secure passwords
# 2. Use real domain name, not example.com
# 3. Configure OAuth or disable auth for development
# 4. Run: ./scripts/init-secrets.sh (to initialize Docker secrets)
# 5. Run: ./jacker init (to complete stack initialization)
# 6. See .env.defaults for complete configuration options
# 7. See docs/SECRETS_MANAGEMENT.md for security best practices
