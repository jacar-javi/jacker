# Test environment for Jacker Platform
# This file defines test services with resource limits

networks:
  test-network:
    driver: bridge
  test-proxy:
    driver: bridge

volumes:
  test-traefik-data:
  test-postgres-data:
  test-redis-data:
  test-crowdsec-data:
  test-crowdsec-config:
  test-prometheus-data:
  test-grafana-data:
  test-results:

services:
  traefik:
    image: traefik:v3.0
    container_name: test-traefik
    command:
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --log.level=DEBUG
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - test-traefik-data:/data
    networks:
      - test-proxy
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 512M
        reservations:
          cpus: "0.5"
          memory: 256M
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost:8080/ping",
        ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  postgres:
    image: postgres:15-alpine
    container_name: test-postgres
    environment:
      POSTGRES_DB: testdb
      POSTGRES_USER: testuser
      POSTGRES_PASSWORD: testpass
    volumes:
      - test-postgres-data:/var/lib/postgresql/data
    networks:
      - test-network
    deploy:
      resources:
        limits:
          cpus: "2.0"
          memory: 2G
        reservations:
          cpus: "1.0"
          memory: 1G
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U testuser"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: test-redis
    command: redis-server --appendonly yes
    volumes:
      - test-redis-data:/data
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  crowdsec:
    image: crowdsecurity/crowdsec:latest
    container_name: test-crowdsec
    environment:
      PGID: "1000"
      COLLECTIONS: "crowdsecurity/traefik"
      GID: "1000"
    volumes:
      - test-crowdsec-config:/etc/crowdsec
      - test-crowdsec-data:/var/lib/crowdsec/data
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "cscli", "version"]
      interval: 30s
      timeout: 10s
      retries: 3

  prometheus:
    image: prom/prometheus:latest
    container_name: test-prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
    volumes:
      - ./tests/fixtures/prometheus.test.yml:/etc/prometheus/prometheus.yml:ro
      - test-prometheus-data:/prometheus
    networks:
      - test-network
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost:9090/-/healthy",
        ]
      interval: 10s
      timeout: 5s
      retries: 3

  grafana:
    image: grafana/grafana:latest
    container_name: test-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_INSTALL_PLUGINS: ""
    volumes:
      - test-grafana-data:/var/lib/grafana
    networks:
      - test-network
    ports:
      - "3000:3000"

  test-app:
    image: ealen/echo-server:latest
    container_name: test-app
    environment:
      PORT: 8080
    networks:
      - test-proxy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.test-app.rule=Host(`test.localhost`)"
      - "traefik.http.routers.test-app.entrypoints=web"
      - "traefik.http.services.test-app.loadbalancer.server.port=8080"

  test-runner:
    image: bats/bats:latest
    container_name: test-runner
    volumes:
      - ./tests:/tests:ro
      - test-results:/results
    networks:
      - test-network
      - test-proxy
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      traefik:
        condition: service_healthy
    command: ["sleep", "infinity"]
