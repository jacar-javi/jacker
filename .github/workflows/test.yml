name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  # ============================================================================
  # Unit Tests
  # ============================================================================
  unit-tests:
    runs-on: ubuntu-latest
    name: Unit Tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup BATS
        run: |
          sudo npm install -g bats
          git clone --depth 1 https://github.com/bats-core/bats-support.git test_lib/bats-support
          git clone --depth 1 https://github.com/bats-core/bats-assert.git test_lib/bats-assert
          git clone --depth 1 https://github.com/bats-core/bats-file.git test_lib/bats-file
          sudo mv test_lib/* /usr/local/lib/

      - name: Run unit tests
        run: |
          bats tests/unit/test_common.bats
          bats tests/unit/test_system.bats
          bats tests/unit/test_services.bats

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-results
          path: test-results/

  # ============================================================================
  # Integration Tests
  # ============================================================================
  integration-tests:
    runs-on: ubuntu-latest
    name: Integration Tests
    needs: unit-tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Compose
        run: |
          docker compose version
          docker version

      - name: Setup BATS
        run: |
          sudo npm install -g bats
          git clone --depth 1 https://github.com/bats-core/bats-support.git test_lib/bats-support
          git clone --depth 1 https://github.com/bats-core/bats-assert.git test_lib/bats-assert
          git clone --depth 1 https://github.com/bats-core/bats-file.git test_lib/bats-file
          sudo mv test_lib/* /usr/local/lib/

      - name: Start test environment
        run: |
          docker compose -f docker-compose.test.yml up -d
          echo "Waiting for services to be ready..."
          sleep 60  # Wait for services to be ready and healthy

      - name: Check service health
        run: |
          docker compose -f docker-compose.test.yml ps
          docker compose -f docker-compose.test.yml exec -T postgres pg_isready
          docker compose -f docker-compose.test.yml exec -T redis redis-cli ping

      - name: Run integration tests
        run: |
          bats tests/integration/test_setup.bats
          bats tests/integration/test_full_stack.bats

      - name: Collect logs
        if: failure()
        run: |
          mkdir -p logs
          docker compose -f docker-compose.test.yml logs > logs/docker-compose.log

      - name: Upload logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-logs
          path: logs/

      - name: Cleanup
        if: always()
        run: |
          docker compose -f docker-compose.test.yml down -v

  # ============================================================================
  # Shell Script Validation
  # ============================================================================
  shellcheck:
    runs-on: ubuntu-latest
    name: Shell Script Validation

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run ShellCheck
        uses: ludeeus/action-shellcheck@2.0.0
        with:
          scandir: './assets'
          format: gcc
          severity: warning

  # ============================================================================
  # Documentation Tests
  # ============================================================================
  docs-test:
    runs-on: ubuntu-latest
    name: Documentation Tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Check if documentation exists
        id: check_docs
        run: |
          if [ -d "jacker-docs" ] && [ -f "jacker-docs/mkdocs.yml" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "⚠️ jacker-docs directory not found - skipping documentation tests"
          fi

      - name: Setup Python
        if: steps.check_docs.outputs.exists == 'true'
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install MkDocs
        if: steps.check_docs.outputs.exists == 'true'
        run: |
          pip install mkdocs mkdocs-material

      - name: Build documentation
        if: steps.check_docs.outputs.exists == 'true'
        run: |
          cd jacker-docs
          mkdocs build --strict

      - name: Check for broken links
        if: steps.check_docs.outputs.exists == 'true'
        run: |
          pip install linkchecker
          linkchecker jacker-docs/site || true

  # ============================================================================
  # Security Scan
  # ============================================================================
  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy security scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # ============================================================================
  # Docker Build Test
  # ============================================================================
  docker-build:
    runs-on: ubuntu-latest
    name: Docker Build Test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build test image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: tests/Dockerfile.test
          push: false
          tags: jacker-test:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Setup environment for docker-compose validation
        run: |
          # Use .env.defaults as base and override with test values
          cp .env.defaults .env

          # Override paths for CI environment
          sed -i "s|^USERDIR=.*|USERDIR=/home/runner|" .env
          sed -i "s|^DOCKERDIR=.*|DOCKERDIR=$(pwd)|" .env
          sed -i "s|^DATADIR=.*|DATADIR=$(pwd)/data|" .env
          sed -i "s|^HOSTNAME=.*|HOSTNAME=test|" .env
          sed -i "s|^DOMAINNAME=.*|DOMAINNAME=example.com|" .env

          # Create required directories and files
          mkdir -p data/traefik/rules data/traefik/acme secrets logs
          touch data/traefik/acme.json
          chmod 600 data/traefik/acme.json
          echo "client-id=test" > secrets/traefik_forward_oauth
          echo "client-secret=test" >> secrets/traefik_forward_oauth

      - name: Test docker-compose configuration
        run: |
          docker compose -f docker-compose.yml config > /dev/null
          docker compose -f docker-compose.test.yml config > /dev/null
          echo "Docker Compose configurations validated successfully"

  # ============================================================================
  # Performance Tests
  # ============================================================================
  performance-tests:
    runs-on: ubuntu-latest
    name: Performance Tests
    needs: [unit-tests, integration-tests]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup test environment
        run: |
          docker compose -f docker-compose.test.yml up -d
          echo "Waiting for services to be ready..."
          sleep 60

      - name: Run performance tests
        run: |
          # Test response times
          for i in {1..10}; do
            time curl -s http://localhost:80 > /dev/null
          done

          # Check memory usage
          docker stats --no-stream

      - name: Cleanup
        if: always()
        run: |
          docker compose -f docker-compose.test.yml down -v

  # ============================================================================
  # Release
  # ============================================================================
  release:
    runs-on: ubuntu-latest
    name: Create Release
    needs: [unit-tests, integration-tests, shellcheck, docs-test, security-scan, docker-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create release notes
        run: |
          echo "## Changes in this release" > release-notes.md
          echo "" >> release-notes.md
          git log --oneline -10 >> release-notes.md

      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            release-notes.md
          body_path: release-notes.md
          draft: false
          prerelease: false