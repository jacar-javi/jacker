name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write

jobs:
  shellcheck:
    name: ShellCheck Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run ShellCheck on Jacker CLI
        run: |
          shellcheck jacker

      - name: Run ShellCheck on library modules
        run: |
          shellcheck assets/lib/*.sh

      - name: Run ShellCheck on other scripts
        uses: ludeeus/action-shellcheck@master
        with:
          scandir: './assets'
          severity: warning
          ignore_paths: |
            jacker-stacks
            templates
            assets/lib

  docker-compose-validation:
    name: Docker Compose Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Validate docker-compose.yml
        run: |
          # Use .env.defaults as base and override with test values
          cp .env.defaults .env

          # Override paths for CI environment
          sed -i "s|^USERDIR=.*|USERDIR=/home/runner|" .env
          sed -i "s|^DOCKERDIR=.*|DOCKERDIR=$(pwd)|" .env
          sed -i "s|^DATADIR=.*|DATADIR=$(pwd)/data|" .env
          sed -i "s|^HOSTNAME=.*|HOSTNAME=test|" .env
          sed -i "s|^DOMAINNAME=.*|DOMAINNAME=example.com|" .env
          sed -i "s|^PUBLIC_FQDN=.*|PUBLIC_FQDN=test.example.com|" .env

          # Create required directories and files
          mkdir -p data/traefik/rules data/traefik/acme data/oauth2-proxy secrets logs
          touch data/traefik/acme.json
          chmod 600 data/traefik/acme.json

          # Create minimal OAuth2-Proxy config
          cat > data/oauth2-proxy/oauth2-proxy.cfg << EOF
          provider = "google"
          client_id = "test"
          client_secret = "test"
          cookie_secret = "testsecret123456testsecret123456"
          email_domains = ["*"]
          upstreams = ["static://200"]
          http_address = "0.0.0.0:4180"
          EOF

          # Validate main compose file (includes all compose/*.yml files)
          docker compose config > /dev/null

          echo "Docker Compose validation successful"

      - name: Check for image version tags
        run: |
          if grep -r ":latest" compose/*.yml | grep -v "socket-proxy"; then
            echo "Warning: Found :latest tags in compose files"
          fi
          echo "Image version check complete"

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
        continue-on-error: true

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v4
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true

      - name: Check for hardcoded secrets
        run: |
          if grep -r -i "password.*:.*[^$]" compose/*.yml | grep -v "PASSWORD" | grep -q .; then
            echo "Warning: Found potential hardcoded passwords"
          fi
          echo "Security check complete"