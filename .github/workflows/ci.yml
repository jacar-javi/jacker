name: CI

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  pull-requests: write

jobs:
  # ============================================================================
  # Shell Script Validation
  # ============================================================================
  shellcheck:
    name: ShellCheck Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run ShellCheck on Jacker CLI
        run: |
          echo "::group::Checking main CLI"
          shellcheck -S error jacker || exit 1
          echo "::endgroup::"

      - name: Run ShellCheck on library modules
        run: |
          echo "::group::Checking library modules"
          for script in assets/lib/*.sh; do
            echo "Checking: $script"
            shellcheck -S error "$script" || exit 1
          done
          echo "::endgroup::"

      - name: Run ShellCheck on setup scripts
        run: |
          echo "::group::Checking setup and utility scripts"
          shellcheck -S warning assets/setup.sh || exit 1
          find assets -name "*.sh" -not -path "assets/lib/*" -not -name "setup.sh" -exec shellcheck -S warning {} \; || exit 1
          echo "::endgroup::"

      - name: Run ShellCheck on other scripts
        run: |
          echo "::group::Checking miscellaneous scripts"
          if [ -f config/postgres/init/00-create-databases.sh ]; then
            shellcheck -S warning config/postgres/init/00-create-databases.sh || exit 1
          fi
          if [ -f .devcontainer/post-create.sh ]; then
            shellcheck -S warning .devcontainer/post-create.sh || exit 1
          fi
          echo "::endgroup::"

  # ============================================================================
  # YAML Validation
  # ============================================================================
  yaml-validation:
    name: YAML Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate YAML files
        run: |
          echo "::group::Installing yamllint"
          pip install yamllint
          echo "::endgroup::"

          echo "::group::Validating Docker Compose files"
          yamllint -d relaxed docker-compose.yml compose/*.yml || exit 1
          echo "::endgroup::"

          echo "::group::Validating configuration files"
          find config -name "*.yml" -o -name "*.yaml" | xargs yamllint -d relaxed || exit 1
          echo "::endgroup::"

          echo "::group::Validating Traefik rules"
          if [ -d data/traefik/rules ]; then
            find data/traefik/rules -name "*.yml" | xargs yamllint -d relaxed || true
          fi
          echo "::endgroup::"

  # ============================================================================
  # Docker Compose Validation
  # ============================================================================
  docker-compose-validation:
    name: Docker Compose Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Prepare environment
        run: |
          echo "::group::Setting up environment"
          # Use .env.defaults as base and override with test values
          cp .env.defaults .env

          # Override paths for CI environment
          sed -i "s|^USERDIR=.*|USERDIR=/home/runner|" .env
          sed -i "s|^DOCKERDIR=.*|DOCKERDIR=$(pwd)|" .env
          sed -i "s|^DATADIR=.*|DATADIR=$(pwd)/data|" .env
          sed -i "s|^HOSTNAME=.*|HOSTNAME=test|" .env
          sed -i "s|^DOMAINNAME=.*|DOMAINNAME=example.com|" .env
          sed -i "s|^PUBLIC_FQDN=.*|PUBLIC_FQDN=test.example.com|" .env
          sed -i "s|^LETSENCRYPT_EMAIL=.*|LETSENCRYPT_EMAIL=test@example.com|" .env

          # Create required directories
          mkdir -p data/traefik/{rules,acme} data/oauth2-proxy secrets logs
          mkdir -p data/loki/data/{chunks,rules,compactor}
          mkdir -p data/prometheus data/grafana data/crowdsec

          # Create required files
          touch data/traefik/acme/acme.json
          chmod 600 data/traefik/acme/acme.json

          # Create dummy secrets
          echo "dummy" > secrets/oauth_client_secret
          echo "dummy123456dummy123456dummy12345" > secrets/oauth_cookie_secret
          echo "dummy" > secrets/postgres_password
          echo "dummy" > secrets/redis_password
          echo "::endgroup::"

      - name: Validate Docker Compose configuration
        run: |
          echo "::group::Validating main compose file"
          docker compose config > /dev/null || exit 1
          echo "✅ Main docker-compose.yml is valid"
          echo "::endgroup::"

          echo "::group::Checking service definitions"
          # Count number of services
          SERVICE_COUNT=$(docker compose config --services | wc -l)
          echo "Found $SERVICE_COUNT services"

          # Verify expected services exist
          EXPECTED_SERVICES="traefik socket-proxy oauth postgres redis crowdsec grafana prometheus loki promtail"
          for service in $EXPECTED_SERVICES; do
            if docker compose config --services | grep -q "^$service$"; then
              echo "✅ Service '$service' found"
            else
              echo "❌ Service '$service' missing"
              exit 1
            fi
          done
          echo "::endgroup::"

      - name: Check for best practices
        run: |
          echo "::group::Checking for :latest tags"
          LATEST_COUNT=$(grep -r ":latest" compose/*.yml | grep -v "socket-proxy" | wc -l || true)
          if [ "$LATEST_COUNT" -gt 0 ]; then
            echo "⚠️  Warning: Found $LATEST_COUNT uses of :latest tag"
            grep -r ":latest" compose/*.yml | grep -v "socket-proxy" || true
          else
            echo "✅ No :latest tags found (good practice)"
          fi
          echo "::endgroup::"

          echo "::group::Checking for hardcoded secrets"
          if grep -r "password:" compose/*.yml | grep -v '${' | grep -v '#' | grep -q .; then
            echo "⚠️  Warning: Potential hardcoded passwords found"
            grep -r "password:" compose/*.yml | grep -v '${' | grep -v '#' || true
          else
            echo "✅ No hardcoded passwords found"
          fi
          echo "::endgroup::"

  # ============================================================================
  # Security Scanning
  # ============================================================================
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
        continue-on-error: true

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true

      - name: Check for exposed secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
        continue-on-error: true

  # ============================================================================
  # Integration Tests
  # ============================================================================
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Test Jacker CLI commands
        run: |
          echo "::group::Testing CLI help system"
          ./jacker help > /dev/null || exit 1
          ./jacker --help > /dev/null || exit 1
          echo "✅ Help system working"
          echo "::endgroup::"

          echo "::group::Testing CLI subcommands"
          # Test that subcommands are recognized (will fail gracefully without Docker)
          ./jacker status 2>&1 | grep -q "Docker is not running" || true
          ./jacker version > /dev/null || exit 1
          echo "✅ CLI subcommands working"
          echo "::endgroup::"

      - name: Test configuration templates
        run: |
          echo "::group::Checking template files"
          TEMPLATE_COUNT=$(find assets/templates -name "*.template" | wc -l)
          echo "Found $TEMPLATE_COUNT template files"

          # Verify key templates exist
          KEY_TEMPLATES="loki-config.yml.template promtail-config.yml.template"
          for template in $KEY_TEMPLATES; do
            if [ -f "assets/templates/$template" ]; then
              echo "✅ Template $template found"
            else
              echo "❌ Template $template missing"
              exit 1
            fi
          done
          echo "::endgroup::"

  # ============================================================================
  # Documentation Check
  # ============================================================================
  documentation:
    name: Documentation Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check README files
        run: |
          echo "::group::Verifying README files exist"
          EXPECTED_READMES="README.md compose/README.md assets/README.md config/README.md data/README.md"
          for readme in $EXPECTED_READMES; do
            if [ -f "$readme" ]; then
              echo "✅ $readme exists"
            else
              echo "❌ $readme missing"
              exit 1
            fi
          done
          echo "::endgroup::"

      - name: Check for broken internal links
        run: |
          echo "::group::Checking internal markdown links"
          # Simple check for broken internal links in markdown files
          for file in $(find . -name "*.md" -not -path "./.git/*"); do
            # Extract markdown links
            grep -oE '\[([^]]+)\]\(([^)]+)\)' "$file" | grep -oE '\]\(([^)]+)\)' | sed 's/](\(.*\))/\1/' | while read -r link; do
              # Check only relative links (not http/https)
              if [[ ! "$link" =~ ^https?:// ]] && [[ ! "$link" =~ ^# ]] && [[ ! "$link" =~ ^mailto: ]]; then
                # Remove anchors
                link_file=$(echo "$link" | cut -d'#' -f1)
                # Check if file exists (relative to the markdown file location)
                dir=$(dirname "$file")
                if [ -n "$link_file" ] && [ ! -f "$dir/$link_file" ] && [ ! -f "$link_file" ]; then
                  echo "⚠️  Broken link in $file: $link"
                fi
              fi
            done
          done
          echo "::endgroup::"

  # ============================================================================
  # Summary
  # ============================================================================
  ci-summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [shellcheck, yaml-validation, docker-compose-validation, security-scan, integration-test, documentation]
    if: always()
    steps:
      - name: Summary
        run: |
          echo "## CI Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Check job statuses
          if [ "${{ needs.shellcheck.result }}" == "success" ]; then
            echo "✅ ShellCheck: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ ShellCheck: Failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.yaml-validation.result }}" == "success" ]; then
            echo "✅ YAML Validation: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ YAML Validation: Failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.docker-compose-validation.result }}" == "success" ]; then
            echo "✅ Docker Compose: Valid" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Docker Compose: Invalid" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.security-scan.result }}" == "success" ]; then
            echo "✅ Security Scan: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️  Security Scan: Check Results" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.integration-test.result }}" == "success" ]; then
            echo "✅ Integration Tests: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Integration Tests: Failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.documentation.result }}" == "success" ]; then
            echo "✅ Documentation: Complete" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Documentation: Issues Found" >> $GITHUB_STEP_SUMMARY
          fi