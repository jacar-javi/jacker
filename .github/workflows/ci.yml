name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write

jobs:
  shellcheck:
    name: ShellCheck Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run ShellCheck
        uses: ludeeus/action-shellcheck@master
        with:
          scandir: '.'
          severity: warning
          ignore_paths: |
            jacker-stacks
            templates

  docker-compose-validation:
    name: Docker Compose Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Validate docker-compose.yml
        run: |
          # Create minimal .env for validation
          cat > .env << EOF
          PUID=1000
          PGID=1000
          TZ=UTC
          USERDIR=/home/user
          DOCKERDIR=/workspaces/jacker
          DATADIR=/workspaces/jacker/data
          HOSTNAME=test
          DOMAINNAME=example.com
          PUBLIC_FQDN=test.example.com
          LOCAL_IPS=127.0.0.1/32
          CODE_TRAEFIK_SUBNET_IP=192.168.71.253
          DOCKER_DEFAULT_SUBNET=192.168.69.0/24
          SOCKET_PROXY_SUBNET=192.168.70.0/24
          SOCKET_PROXY_IP=192.168.70.254
          TRAEFIK_PROXY_SUBNET=192.168.71.0/24
          TRAEFIK_PROXY_IP=192.168.71.254
          HOST_IS_VM=true
          UFW_ALLOW_FROM=
          UFW_ALLOW_PORTS=http,https
          UFW_ALLOW_SSH=192.168.71.253
          OAUTH_COOKIE_LIFETIME=604800
          OAUTH_CLIENT_ID=test
          OAUTH_CLIENT_SECRET=test
          OAUTH_SECRET=testsecret
          OAUTH_WHITELIST=test@example.com
          LETSENCRYPT_EMAIL=test@example.com
          POSTGRES_DB=crowdsec_db
          POSTGRES_USER=crowdsec
          POSTGRES_PASSWORD=testpassword
          CROWDSEC_API_PORT=8888
          CROWDSEC_TRAEFIK_BOUNCER_API_KEY=testkey
          CROWDSEC_IPTABLES_BOUNCER_API_KEY=testkey
          CROWDSEC_API_LOCAL_PASSWORD=testpassword
          SMTP_HOST=
          SMTP_PORT=587
          SMTP_FROM=
          SMTP_USERNAME=
          SMTP_PASSWORD=
          ALERT_EMAIL_TO=
          TELEGRAM_BOT_TOKEN=
          TELEGRAM_CHAT_ID=
          EOF

          # Create required directories and files
          mkdir -p data/traefik/rules data/traefik/acme secrets logs
          touch data/traefik/acme.json
          chmod 600 data/traefik/acme.json
          echo "client-id=test" > secrets/traefik_forward_oauth
          echo "client-secret=test" >> secrets/traefik_forward_oauth

          # Validate main compose file
          docker compose config > /dev/null

          # Validate individual compose files
          for file in compose/*.yml; do
            echo "Validating $file..."
            docker compose -f "$file" config > /dev/null
          done

      - name: Check for image version tags
        run: |
          if grep -r ":latest" compose/*.yml | grep -v "socket-proxy"; then
            echo "Error: Found :latest tags in compose files"
            exit 1
          fi
          echo "All images have version tags"

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Check for hardcoded secrets
        run: |
          if grep -r -i "password.*:.*[^$]" compose/*.yml | grep -v "PASSWORD" | grep -q .; then
            echo "Error: Found potential hardcoded passwords"
            exit 1
          fi
          echo "No hardcoded secrets found"

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up test environment
        run: |
          # Create minimal .env
          cat > .env << EOF
          PUID=1000
          PGID=1000
          TZ=UTC
          USERDIR=$HOME
          DOCKERDIR=$(pwd)
          DATADIR=$(pwd)/data
          HOSTNAME=test
          DOMAINNAME=example.com
          PUBLIC_FQDN=test.example.com
          LOCAL_IPS=127.0.0.1/32
          CODE_TRAEFIK_SUBNET_IP=192.168.71.253
          DOCKER_DEFAULT_SUBNET=192.168.69.0/24
          SOCKET_PROXY_SUBNET=192.168.70.0/24
          SOCKET_PROXY_IP=192.168.70.254
          TRAEFIK_PROXY_SUBNET=192.168.71.0/24
          TRAEFIK_PROXY_IP=192.168.71.254
          HOST_IS_VM=true
          UFW_ALLOW_FROM=
          UFW_ALLOW_PORTS=http,https
          UFW_ALLOW_SSH=192.168.71.253
          OAUTH_COOKIE_LIFETIME=604800
          OAUTH_CLIENT_ID=test
          OAUTH_CLIENT_SECRET=test
          OAUTH_SECRET=testsecret123456
          OAUTH_WHITELIST=test@example.com
          LETSENCRYPT_EMAIL=test@example.com
          POSTGRES_DB=crowdsec_db
          POSTGRES_USER=crowdsec
          POSTGRES_PASSWORD=testpass123
          CROWDSEC_API_PORT=8888
          CROWDSEC_TRAEFIK_BOUNCER_API_KEY=testkey123
          CROWDSEC_IPTABLES_BOUNCER_API_KEY=testkey456
          CROWDSEC_API_LOCAL_PASSWORD=testpass456
          SMTP_HOST=
          SMTP_PORT=587
          SMTP_FROM=
          SMTP_USERNAME=
          SMTP_PASSWORD=
          ALERT_EMAIL_TO=
          TELEGRAM_BOT_TOKEN=
          TELEGRAM_CHAT_ID=
          EOF

          # Make scripts executable
          chmod +x *.sh assets/*.sh

      - name: Run test suite (quick mode)
        run: |
          ./assets/test.sh --quick

      - name: Test backup functionality
        run: |
          # Create minimal required structure
          mkdir -p data/traefik/{rules,acme} secrets
          touch data/traefik/acme.json
          chmod 600 data/traefik/acme.json
          echo "client-id=test" > secrets/traefik_forward_oauth

          # Test backup
          ./assets/backup.sh /tmp/test-backup

          # Verify backup
          if [ ! -f /tmp/test-backup/jacker-config-*.tar.gz ]; then
            echo "Backup file not created"
            exit 1
          fi

          if [ ! -f /tmp/test-backup/checksums.sha256 ]; then
            echo "Checksums file not created"
            exit 1
          fi

          # Verify checksums
          cd /tmp/test-backup && sha256sum -c checksums.sha256

  documentation-check:
    name: Documentation Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check required documentation
        run: |
          required_docs=(
            "README.md"
            "CONTRIBUTING.md"
            "SECURITY.md"
            "LICENSE"
          )

          missing_docs=()
          for doc in "${required_docs[@]}"; do
            if [ ! -f "$doc" ]; then
              missing_docs+=("$doc")
            fi
          done

          if [ ${#missing_docs[@]} -gt 0 ]; then
            echo "Missing documentation files:"
            printf '%s\n' "${missing_docs[@]}"
            exit 1
          fi

          echo "All required documentation files exist"

      - name: Check for broken links in README
        uses: gaurav-nelson/github-action-markdown-link-check@v1
        with:
          use-quiet-mode: 'yes'
          config-file: '.github/markdown-link-check-config.json'
        continue-on-error: true

  lint-commit-messages:
    name: Lint Commit Messages
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Lint commit messages
        uses: wagoid/commitlint-github-action@v5
        continue-on-error: true
