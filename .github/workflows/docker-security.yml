name: Docker Security Scan

on:
  schedule:
    # Run every Monday at 2 AM UTC
    - cron: '0 2 * * 1'
  workflow_dispatch:
  pull_request:
    paths:
      - 'compose/*.yml'
      - 'docker-compose.yml'

permissions:
  contents: read
  security-events: write
  issues: write

jobs:
  # ============================================================================
  # Scan Docker Images for Vulnerabilities
  # ============================================================================
  scan-images:
    name: Scan Docker Images
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          # Core services
          - service: traefik
            image: traefik:3.1
          - service: postgres
            image: postgres:16-alpine
          - service: redis
            image: redis:7-alpine

          # Security services
          - service: crowdsec
            image: crowdsecurity/crowdsec:latest
          - service: bouncer-traefik
            image: crowdsecurity/bouncer-traefik:latest

          # Monitoring stack
          - service: prometheus
            image: prom/prometheus:latest
          - service: grafana
            image: grafana/grafana:latest
          - service: loki
            image: grafana/loki:latest
          - service: promtail
            image: grafana/promtail:latest
          - service: alertmanager
            image: prom/alertmanager:latest

          # Management tools
          - service: portainer
            image: portainer/portainer-ce:latest
          - service: homepage
            image: gethomepage/homepage:latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ matrix.image }}
          format: 'sarif'
          output: 'trivy-${{ matrix.service }}.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-${{ matrix.service }}.sarif'
          category: 'docker-${{ matrix.service }}'
        continue-on-error: true

      - name: Generate vulnerability summary
        if: always()
        run: |
          docker run --rm -v $(pwd):/workspace aquasec/trivy:latest image \
            --severity HIGH,CRITICAL \
            --format json \
            --output /workspace/trivy-${{ matrix.service }}.json \
            ${{ matrix.image }} || true

          if [ -f trivy-${{ matrix.service }}.json ]; then
            echo "## ${{ matrix.service }} Security Report" >> vulnerability-summary.md
            echo "" >> vulnerability-summary.md

            CRITICAL_COUNT=$(jq '[.Results[].Vulnerabilities[] | select(.Severity=="CRITICAL")] | length' trivy-${{ matrix.service }}.json || echo "0")
            HIGH_COUNT=$(jq '[.Results[].Vulnerabilities[] | select(.Severity=="HIGH")] | length' trivy-${{ matrix.service }}.json || echo "0")

            if [ "$CRITICAL_COUNT" -gt 0 ] || [ "$HIGH_COUNT" -gt 0 ]; then
              echo "⚠️  **Found vulnerabilities:**" >> vulnerability-summary.md
              echo "- Critical: $CRITICAL_COUNT" >> vulnerability-summary.md
              echo "- High: $HIGH_COUNT" >> vulnerability-summary.md
            else
              echo "✅ No high or critical vulnerabilities found" >> vulnerability-summary.md
            fi
            echo "" >> vulnerability-summary.md
          fi

  # ============================================================================
  # Check for Image Updates
  # ============================================================================
  check-updates:
    name: Check for Image Updates
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Check for newer versions
        run: |
          echo "## Docker Image Update Check" > update-report.md
          echo "" >> update-report.md
          echo "Checking for newer versions of Docker images..." >> update-report.md
          echo "" >> update-report.md

          # Extract images from compose files
          for file in compose/*.yml; do
            if [ -f "$file" ]; then
              echo "### $(basename $file)" >> update-report.md

              # Extract image lines
              grep -E '^\s+image:' "$file" | while read -r line; do
                IMAGE=$(echo "$line" | sed 's/.*image: *//' | tr -d '"' | sed 's/${.*}/latest/')

                if [[ ! "$IMAGE" =~ ":latest" ]] && [[ "$IMAGE" =~ ":" ]]; then
                  IMAGE_NAME=$(echo "$IMAGE" | cut -d: -f1)
                  CURRENT_TAG=$(echo "$IMAGE" | cut -d: -f2)

                  echo "- **$IMAGE_NAME**: Current version: \`$CURRENT_TAG\`" >> update-report.md

                  # Note: This is a placeholder for actual version checking
                  # In practice, you would query Docker Hub API or use a tool like skopeo
                fi
              done
              echo "" >> update-report.md
            fi
          done

      - name: Upload reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            vulnerability-summary.md
            update-report.md
            trivy-*.json

  # ============================================================================
  # Container Compliance Check
  # ============================================================================
  compliance-check:
    name: Container Compliance
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check Dockerfile best practices
        run: |
          echo "## Container Compliance Report" > compliance-report.md
          echo "" >> compliance-report.md

          echo "### Security Best Practices Check" >> compliance-report.md
          echo "" >> compliance-report.md

          # Check for non-root user configurations
          echo "#### Non-root User Check" >> compliance-report.md
          for file in compose/*.yml; do
            if [ -f "$file" ]; then
              SERVICE=$(basename "$file" .yml)
              if grep -q "user:" "$file"; then
                echo "✅ $SERVICE: Runs as non-root user" >> compliance-report.md
              else
                echo "⚠️  $SERVICE: May run as root user" >> compliance-report.md
              fi
            fi
          done
          echo "" >> compliance-report.md

          # Check for read-only root filesystems
          echo "#### Read-only Filesystem Check" >> compliance-report.md
          for file in compose/*.yml; do
            if [ -f "$file" ]; then
              SERVICE=$(basename "$file" .yml)
              if grep -q "read_only: true" "$file"; then
                echo "✅ $SERVICE: Uses read-only root filesystem" >> compliance-report.md
              else
                echo "ℹ️  $SERVICE: Writable root filesystem" >> compliance-report.md
              fi
            fi
          done
          echo "" >> compliance-report.md

          # Check for security_opt configurations
          echo "#### Security Options Check" >> compliance-report.md
          for file in compose/*.yml; do
            if [ -f "$file" ]; then
              SERVICE=$(basename "$file" .yml)
              if grep -q "security_opt:" "$file"; then
                echo "✅ $SERVICE: Has security options configured" >> compliance-report.md
              else
                echo "ℹ️  $SERVICE: No additional security options" >> compliance-report.md
              fi
            fi
          done

      - name: Upload compliance report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: compliance-report
          path: compliance-report.md

  # ============================================================================
  # Summary Report
  # ============================================================================
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [scan-images, check-updates, compliance-check]
    if: always()
    steps:
      - name: Download all reports
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true

      - name: Generate summary
        run: |
          echo "# 🔒 Docker Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Date:** $(date -u '+%Y-%m-%d %H:%M UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Add vulnerability summary if exists
          if [ -f vulnerability-summary.md ]; then
            echo "## Vulnerability Scan Results" >> $GITHUB_STEP_SUMMARY
            cat vulnerability-summary.md >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

          # Add update report if exists
          if [ -f update-report.md ]; then
            cat update-report.md >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

          # Add compliance report if exists
          if [ -f compliance-report.md ]; then
            cat compliance-report.md >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📋 **Full reports available in workflow artifacts**" >> $GITHUB_STEP_SUMMARY

      - name: Create issue for critical vulnerabilities
        if: github.event_name == 'schedule'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            // Check if we have critical vulnerabilities
            let hasCritical = false;
            try {
              const files = fs.readdirSync('.');
              for (const file of files) {
                if (file.startsWith('trivy-') && file.endsWith('.json')) {
                  const content = fs.readFileSync(file, 'utf8');
                  const report = JSON.parse(content);
                  if (report.Results) {
                    for (const result of report.Results) {
                      if (result.Vulnerabilities) {
                        const critical = result.Vulnerabilities.filter(v => v.Severity === 'CRITICAL');
                        if (critical.length > 0) {
                          hasCritical = true;
                          break;
                        }
                      }
                    }
                  }
                }
              }
            } catch (e) {
              console.log('No vulnerability reports found');
            }

            if (hasCritical) {
              // Check if an issue already exists
              const issues = await github.rest.issues.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                labels: 'security,docker',
                state: 'open'
              });

              const existingIssue = issues.data.find(issue =>
                issue.title.includes('Critical Docker vulnerabilities detected')
              );

              if (!existingIssue) {
                await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: '🚨 Critical Docker vulnerabilities detected',
                  body: `Critical security vulnerabilities have been detected in Docker images.

Please review the [security scan workflow results](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}) for details.

**Action required:** Update affected Docker images to patched versions.`,
                  labels: ['security', 'docker', 'critical']
                });
              }
            }