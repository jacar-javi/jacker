name: Health Check

on:
  schedule:
    # Run every 6 hours
    - cron: '0 */6 * * *'
  workflow_dispatch:
    inputs:
      verbose:
        description: 'Enable verbose output'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

permissions:
  contents: read
  issues: write

jobs:
  # ============================================================================
  # Configuration Health Check
  # ============================================================================
  config-check:
    name: Configuration Health
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check environment template
        run: |
          echo "## Configuration Health Check" > health-report.md
          echo "" >> health-report.md

          echo "### Environment Variables" >> health-report.md

          # Check .env.defaults exists and is valid
          if [ -f .env.defaults ]; then
            echo "✅ .env.defaults exists" >> health-report.md

            # Count configuration variables
            VAR_COUNT=$(grep -c "^[A-Z]" .env.defaults || echo "0")
            echo "📊 Found $VAR_COUNT configuration variables" >> health-report.md

            # Check for required variables
            REQUIRED_VARS="DOMAINNAME PUBLIC_FQDN USERDIR DOCKERDIR DATADIR TZ PUID PGID"
            echo "" >> health-report.md
            echo "#### Required Variables Check" >> health-report.md
            for var in $REQUIRED_VARS; do
              if grep -q "^$var=" .env.defaults; then
                echo "✅ $var defined" >> health-report.md
              else
                echo "❌ $var missing" >> health-report.md
              fi
            done
          else
            echo "❌ .env.defaults missing!" >> health-report.md
            exit 1
          fi

      - name: Check directory structure
        run: |
          echo "" >> health-report.md
          echo "### Directory Structure" >> health-report.md

          REQUIRED_DIRS="assets assets/lib assets/templates compose config data secrets"
          for dir in $REQUIRED_DIRS; do
            if [ -d "$dir" ]; then
              FILE_COUNT=$(find "$dir" -type f | wc -l)
              echo "✅ $dir/ exists ($FILE_COUNT files)" >> health-report.md
            else
              echo "❌ $dir/ missing" >> health-report.md
            fi
          done

      - name: Check compose files
        run: |
          echo "" >> health-report.md
          echo "### Docker Compose Services" >> health-report.md

          # Count compose files
          COMPOSE_COUNT=$(ls compose/*.yml 2>/dev/null | wc -l)
          echo "📊 Found $COMPOSE_COUNT service definitions" >> health-report.md
          echo "" >> health-report.md

          # List all services
          for file in compose/*.yml; do
            if [ -f "$file" ]; then
              SERVICE=$(basename "$file" .yml)
              echo "- $SERVICE" >> health-report.md
            fi
          done

      - name: Upload health report
        uses: actions/upload-artifact@v4
        with:
          name: config-health-report
          path: health-report.md

  # ============================================================================
  # Script Validation
  # ============================================================================
  script-validation:
    name: Script Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check script executability
        run: |
          echo "## Script Health Check" > script-report.md
          echo "" >> script-report.md

          echo "### Main Scripts" >> script-report.md

          # Check main jacker script
          if [ -f jacker ]; then
            if [ -x jacker ]; then
              echo "✅ jacker is executable" >> script-report.md
            else
              echo "❌ jacker is not executable" >> script-report.md
            fi

            # Check shebang
            if head -n 1 jacker | grep -q "^#!/"; then
              echo "✅ jacker has valid shebang" >> script-report.md
            else
              echo "❌ jacker missing shebang" >> script-report.md
            fi
          else
            echo "❌ jacker script missing!" >> script-report.md
          fi

          echo "" >> script-report.md
          echo "### Library Modules" >> script-report.md

          # Check library modules
          for module in assets/lib/*.sh; do
            if [ -f "$module" ]; then
              MODULE_NAME=$(basename "$module")
              echo "#### $MODULE_NAME" >> script-report.md

              # Check if it sources common.sh
              if grep -q "source.*common.sh" "$module" || [ "$MODULE_NAME" = "common.sh" ]; then
                echo "✅ Properly structured" >> script-report.md
              else
                echo "⚠️  May not source common.sh" >> script-report.md
              fi

              # Count functions
              FUNC_COUNT=$(grep -c "^[[:space:]]*[a-z_]*()[[:space:]]*{" "$module" || echo "0")
              echo "📊 Contains $FUNC_COUNT functions" >> script-report.md
            fi
          done

      - name: Test CLI help
        run: |
          echo "" >> script-report.md
          echo "### CLI Functionality" >> script-report.md

          # Test help command
          if ./jacker help > /dev/null 2>&1; then
            echo "✅ Help command works" >> script-report.md
          else
            echo "❌ Help command failed" >> script-report.md
          fi

          # Test version command
          if ./jacker version > /dev/null 2>&1; then
            VERSION=$(./jacker version 2>/dev/null | head -n 1)
            echo "✅ Version command works: $VERSION" >> script-report.md
          else
            echo "❌ Version command failed" >> script-report.md
          fi

      - name: Upload script report
        uses: actions/upload-artifact@v4
        with:
          name: script-health-report
          path: script-report.md

  # ============================================================================
  # Template Validation
  # ============================================================================
  template-validation:
    name: Template Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check templates
        run: |
          echo "## Template Health Check" > template-report.md
          echo "" >> template-report.md

          echo "### Configuration Templates" >> template-report.md

          TEMPLATE_COUNT=$(find assets/templates -name "*.template" 2>/dev/null | wc -l || echo "0")
          echo "📊 Found $TEMPLATE_COUNT template files" >> template-report.md
          echo "" >> template-report.md

          # Check each template
          for template in assets/templates/*.template; do
            if [ -f "$template" ]; then
              TEMPLATE_NAME=$(basename "$template")
              echo "#### $TEMPLATE_NAME" >> template-report.md

              # Check for variable placeholders
              VAR_COUNT=$(grep -o '\${[^}]*}' "$template" | sort -u | wc -l)
              echo "- Contains $VAR_COUNT variable placeholders" >> template-report.md

              # Check file size
              SIZE=$(stat -c%s "$template" 2>/dev/null || stat -f%z "$template" 2>/dev/null || echo "0")
              echo "- Size: $SIZE bytes" >> template-report.md
            fi
          done

      - name: Upload template report
        uses: actions/upload-artifact@v4
        with:
          name: template-health-report
          path: template-report.md

  # ============================================================================
  # Documentation Check
  # ============================================================================
  documentation-check:
    name: Documentation Health
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check documentation
        run: |
          echo "## Documentation Health Check" > doc-report.md
          echo "" >> doc-report.md

          echo "### README Files" >> doc-report.md

          # Check for README files
          README_FILES="README.md assets/README.md compose/README.md config/README.md data/README.md secrets/README.md"
          for readme in $README_FILES; do
            if [ -f "$readme" ]; then
              LINE_COUNT=$(wc -l < "$readme")
              echo "✅ $readme exists ($LINE_COUNT lines)" >> doc-report.md
            else
              echo "❌ $readme missing" >> doc-report.md
            fi
          done

          echo "" >> doc-report.md
          echo "### Other Documentation" >> doc-report.md

          # Check for other important docs
          if [ -f "CONTRIBUTING.md" ]; then
            echo "✅ CONTRIBUTING.md exists" >> doc-report.md
          else
            echo "⚠️  CONTRIBUTING.md missing" >> doc-report.md
          fi

          if [ -f "SECURITY.md" ]; then
            echo "✅ SECURITY.md exists" >> doc-report.md
          else
            echo "⚠️  SECURITY.md missing" >> doc-report.md
          fi

          if [ -f "LICENSE" ]; then
            echo "✅ LICENSE exists" >> doc-report.md
          else
            echo "❌ LICENSE missing" >> doc-report.md
          fi

      - name: Upload documentation report
        uses: actions/upload-artifact@v4
        with:
          name: doc-health-report
          path: doc-report.md

  # ============================================================================
  # Health Summary
  # ============================================================================
  health-summary:
    name: Health Summary
    runs-on: ubuntu-latest
    needs: [config-check, script-validation, template-validation, documentation-check]
    if: always()
    steps:
      - name: Download all reports
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true

      - name: Generate summary
        run: |
          echo "# 🏥 Jacker Health Check Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Date:** $(date -u '+%Y-%m-%d %H:%M UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Job status summary
          echo "## Status Overview" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.config-check.result }}" == "success" ]; then
            echo "✅ Configuration: Healthy" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Configuration: Issues detected" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.script-validation.result }}" == "success" ]; then
            echo "✅ Scripts: Valid" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Scripts: Problems found" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.template-validation.result }}" == "success" ]; then
            echo "✅ Templates: Present" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️  Templates: Check needed" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.documentation-check.result }}" == "success" ]; then
            echo "✅ Documentation: Complete" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️  Documentation: Updates needed" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Add detailed reports
          for report in *-report.md; do
            if [ -f "$report" ]; then
              cat "$report" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
            fi
          done

          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📋 **Full reports available in workflow artifacts**" >> $GITHUB_STEP_SUMMARY

      - name: Create issue if unhealthy
        if: failure() && github.event_name == 'schedule'
        uses: actions/github-script@v7
        with:
          script: |
            // Check if an issue already exists
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'health-check,automated',
              state: 'open'
            });

            const existingIssue = issues.data.find(issue =>
              issue.title.includes('Health check failed')
            );

            if (!existingIssue) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: '⚠️ Health check failed',
                body: `The automated health check has detected issues with the Jacker configuration.

Please review the [health check workflow results](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}) for details.

**Components checked:**
- Configuration files
- Script validation
- Template files
- Documentation

This issue was automatically created by the health check workflow.`,
                labels: ['health-check', 'automated', 'maintenance']
              });
            }